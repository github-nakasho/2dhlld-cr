

/***********************************************************************
 *
 *	thirdstep.h
 *
 *	TVD Runge-Kutta scheme third step time marching function
 *
 *
 *	i, j, k : loop index of x, y, z
 *	m : U, U1, F, G vector component index
 *
 *	
 *	2014 May  07 : add flux-CT.
 *	2012 Dec. 26 : coded by Sho Nakamura (Tohoku Univ).
 *
 **********************************************************************/


int ThirdStep(void)
{	

	int i, j, k, m;
	
	/*
	//============================================================
	//	full step GLM source term solver
	//============================================================
	
	GLMSourceSolver(U1, V);
	*/
	
	//============================================================
	//	2nd order slope limiter in x
	//============================================================

	//VanLeerLimiterX();
	MinmodLimiterX();
	
	
	//============================================================
	//	HLL flux in x-direction
	//============================================================
	
	HLLX(U1);
	
	
	//============================================================
	//	2nd order slope limiter in y
	//============================================================
	
	//VanLeerLimiterY();
	MinmodLimiterY();
	
	
	//============================================================
	//	HLL flux in y-direction
	//============================================================
	
	HLLY(U1);
	
	
	//============================================================
	//	flux-CT
	//============================================================
	
	FluxCT();
	
	
	//============================================================
	//	calculating source term
	//============================================================
	
	NoSource(V, S);
	

	//-----U^(n+1)[i]=1/3*U^n[i]
	//								+2/3*(U^(n+2/3)[i]
	//											-(dt/dx)(F^(n+2/3)[i]-F^(n+2/3)[i-1])
	//											-(dt/dy)(G^(n+2/3)[j]-G^(n+2/3)[j-1])
	//											-(dt/dz)(H^(n+2/3)[k]-H^(n+2/3)[k-1])
	//											+dt*S^(n+2/3)[i][j][k])-----
	
#pragma omp parallel for private(i, j, k, m)
	for(m=0; m<9; m++){
		for(i=1; i<ixmax1; i++){
			for(j=1; j<jymax1; j++){
				for(k=1; k<kzmax1; k++){
				
					U[m][i][j][k]=(oneo3*
												(U[m][i][j][k]
												 +2.0*(U1[m][i][j][k]
															 -dtodx*(F[m][i][j][k]-F[m][i-1][j][k])
															 -dtody*(G[m][i][j][k]-G[m][i][j-1][k])
															 +dt*S[m][i][j][k])));
					

				}
			}
		}
	}
		
	
  /*
	//============================================================
	//	i=0 & i=ixmax1 free boundary
	//============================================================
	
	XLeftFreeBoundary(U);	
	XRightFreeBoundary(U);	
	*/
	/*
	//============================================================
	//	j=0 & j=jymax1 free boundary
	//============================================================
	
	YLeftFreeBoundary(U);
	YRightFreeBoundary(U);
	*/
	/*
	//============================================================
	//	k=0 & k=kzmax1 free boundary
	//============================================================
	
	ZLeftFreeBoundary(U);
	ZRightFreeBoundary(U);	
	*/
	
	//============================================================
	//	i=0 & i=ixmax1 periodic boundary
	//============================================================
	
	XLeftPeriodicBoundary(U);	
	XRightPeriodicBoundary(U);	
	
	
	//============================================================
	//	j=0 & j=jymax1 periodic boundary
	//============================================================
	
	YLeftPeriodicBoundary(U);
	YRightPeriodicBoundary(U);
	
	/*
	//============================================================
	//	i=0 & i=ixmax1 initialize boundary
	//============================================================
	
	XLeftInitializeBoundary(U);	
	XRightInitializeBoundary(U);	
	*/
	/*
	//============================================================
	//	j=0 & j=jymax1 initialize boundary
	//============================================================
	 
	YLeftInitializeBoundary(U);
	YRightInitializeBoundary(U);
	*/
	
	//============================================================
	//	k=0 & k=kzmax1 periodic boundary
	//============================================================
	
	ZLeftPeriodicBoundary(U);	
	ZRightPeriodicBoundary(U);	
	
	/*
	//============================================================
	//	k=0 & k=kzmax1 fixed boundary
	//============================================================
	
	ZLeftFixedBoundary(U);
	ZRightFixedBoundary(U);
	*/
	/*
	//============================================================
	//	k=0 & k=kzmax1 reflected boundary
	//============================================================
	
	ZLeftReflectedBoundary(U);
	ZRightReflectedBoundary(U);
	*/
  
	//==================================================
	//	convert from U to V.
	//==================================================
	
	UtoV(U, V);
	
	
	//============================================================
	//	negative density or pressure check
	//============================================================
	
	Check(U, V);
	
	
	return 0;

}















